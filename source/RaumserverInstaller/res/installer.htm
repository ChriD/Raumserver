<html custom-frame="layered" resizeable>
<head>
    <title></title>
    <style>

        @import url(vgrid.css);

        html {
            background: transparent;
        }


        table {
            style-set: vgrid;
            // see vgrid.css width:*;
            height: *;
        }

            table th:nth-child(2) {
                width: *;
            }

            table th:last-child {
                width: 8em;
            }


        body {
            // will draw clock in between background and content layers border-radius:50%;
            border: 1px solid black;
            background: #1585b5;
            //margin: *;
            // flex margins will move the body in the mddle of the root //size: 500dip;
            flow: vertical;
            transform: scale(0.1);
            // initially it is collapsed to center overflow:hidden;
            font-size: 10pt;
            font-family: "Segoe UI", Tahoma, Helvetica, sans-serif;
            color: white;
        }

            body.shown {
                transform: scale(1);
                transition: transform(linear,300ms);
            }

            body.hidden {
                transform: scale(0.1);
                transition: transform(linear,300ms);
            }

            body > header {
                text-align: center;
                color: brown;
                margin-top: 36dip;
                font-weight: bold;
            }

            body > div.header {
                background: white;
                color: #808080;
            }

                body > div.header > div.left {
                    float: left;
                }

                body > div.header > div.right {
                    float: right;
                    width: 105px;
                }

                body > div.header > div.left > h1.caption {
                    margin: 10px;
                }

                body > div.header > div.right > div.closeIcon {
                    background-repeat: no-repeat;
                    background-position: center;
                    background-size: 24dip;
                    //background-image: url(svg/close.svg); /* svg that has no intrinsic styles */
                    background-image: url(png/close.png); /* svg that has no intrinsic styles */
                    fill: blue; /* defining default fill color of used SVG image */
                    float: left;
                    width: 50px;
                    height: 50px;
                }

                body > div.header > div.right > div.minimizeIcon {
                    background-repeat: no-repeat;
                    background-position: center;
                    background-size: 24dip;
                    //background-image: url(svg/close.svg); /* svg that has no intrinsic styles */
                    background-image: url(png/close.png); /* svg that has no intrinsic styles */
                    fill: blue; /* defining default fill color of used SVG image */
                    float: left;
                    width: 50px;
                    height: 50px;
                }


            body > div.page {
                color: #FFFFFF;
                margin: 10px;
            }


        div {
            border: 1px solid lightgray;
        }
    </style>
    <script type="text/tiscript">

           include "moveable-view.tis";

              const body = $(body);

        self.ready = function() // html loaded - DOM ready
        {
          view.caption = "Raumfeld Installer";

          // positioning the window in the middle of the screen:
          var (sx,sy,sw,sh) = view.screenBox(#workarea,#rectw); // gettting screen/monitor size
          var (w,h) = self.$(body).box(#dimension);
          w += w/2; h += h/2; // to accomodate expanding animation

          view.move( sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);

          body.timer(40, function() { body.attributes.addClass("shown") });
          //$(span#platform).text = System.PLATFORM;
          //$(span#arch).text = view.architecture(); // calling native function defined in ulayered.cpp

          //var networkAdaperInformation = view.getNetworkAdapterInformation();
          //var networkAdaperInformationParsed = JSON.parse(networkAdaperInformation);

          var records = new Array(500);
    
            for(var i = 0; i < records.length; ++i)
              records[i] = {index: i, caption:"Item", status:"" };

            var n = records.length;
            var p = 0;
       
            var vlist = $(table);
    
            // feed it by these records
            vlist.value = records;

            // setting first item as current:    
            vlist.tbody.currentIndex = 0;


            NetworkAdapterSelection.fillNetworkAdapterList();

            var btn = $(select#networkadapterSelectionComboBox);
            btn.on("change", function() { $(#testlog2).append("<br>Selected"); });

            var btn2 = $(select#selectionTest);
            btn2.on("change", function() { $(#testlog2).append("<br>Selected"); });            


        }





        /**
        * functions which contains to the network selection page
        */
        namespace NetworkAdapterSelection 
        {

             
            /**
            * Fills the netwokr adapter selection combo box with the items got from the backend
            */
            function fillNetworkAdapterList() 
            { 
                var networkAdaperInformation = view.getNetworkAdapterInformation().toString();            
                var networkAdaperInformationJsonsObject = parseData(networkAdaperInformation);
                var networkAdapterInformationArray = networkAdaperInformationJsonsObject.propertyAt("networkAdapterInformations");
                addNetworkAdapters(networkAdapterInformationArray);
            }

            /**
            * Adds a network adapter information information list to the network Choosement list
            */
            function addNetworkAdapters(_networkAdapterInformationArray) 
            {   
                // run through the given array which consists of a list of networkAdapter Information objects
                for (var arrayPosition in _networkAdapterInformationArray)
                {                 
                    // get the "networkAdapter" object pf the array position                  
                    var networkAdapterInfoObject = arrayPosition.propertyAt("networkAdapter");             
                    addNetworkAdapter(networkAdapterInfoObject);
                }                                    
            }

            /**
            * Adds one network adapter information to the network Choosement combo box
            */
            function addNetworkAdapter(_networkAdapterInformationObject) 
            {   
                var option = new Element("option", _networkAdapterInformationObject.propertyAt("name").toString());          
                $(#networkadapterSelectionComboBox).options.append(option);     
            }        
        }


        // <button #close> click handler
        $(#close).on("click",function()
        {
          body.onAnimationEnd = function() { view.close(); };
          body.attributes.removeClass("shown");
        });

        // <button #close> click handler
        $(#closeIconContainer).on("click",function()
        {
          $(#testlog).$content("Close clicked");
          body.onAnimationEnd = function() { view.close(); };
          body.attributes.removeClass("shown");
        });

        // <button #minimize> click handler
        $(#minimize).on("click",function()
        {


            var networkAdaperInformation = view.getNetworkAdapterInformation().toString();            
            var networkAdaperInformationJsonsObject = parseData(networkAdaperInformation);              
            var networkAdapterInformationArray = networkAdaperInformationJsonsObject.propertyAt("networkAdapterInformations");

            // add the adapters given by the backend to the selectable combo box
            NetworkAdapterSelection.addNetworkAdapters(networkAdapterInformationArray);

           // $(#testlog).value = String.printf("%v",networkAdaperInformation);
      
                
            /*
            for (var adapterObject in networkAdapterInformationArray)
            {
                //$(#testlog2).append(adapterObject.toString());

                adapterObject.show(); 
                var test = adapterObject.propertyAt("networkAdapter");
                test.show();

                var name = test.propertyAt("name");
                var subentMask = test.subnetMask;
             
                 
            }*/
            
            

             //$(#testlog2).append("<br>----");

        });

        // <button #minimize> click handler
        $(#minimizeIconContainer).on("click",function()
        {
          //  $(#testlog).$content("Minimizes clicked");
          view.state = View.WINDOW_MINIMIZED;
        });

          // setup movable window handler:
          movableView();

     

    </script>

</head>
<body>

    <!-- Header of installer -->
    <div class="header">
        <div class="left"><h1 class=" caption">Raumserver Installer</h1></div>
        <div class="right"><div class="minimizeIcon" id="minimizeIconContainer"></div><div class="closeIcon" id="closeIconContainer"></div></div>
    </div>

    <div id="page1" class="page">

        <div>
            This installer helps you to install the RaumfeldServer application onto an raumfeld device
        </div>

        <div>
            Please select a Network-Adapter where to search for Raumfeld devices:
            <select id="networkadapterSelectionComboBox"></select>
        </div>

        <div>
            <button>Next</button>
        </div>
    
    </div>

    
    

    <p>Running on <em #machine /> machine</p>

    <button #append>Append</button>
    <button #open>Open</button>
    <select id="selectionTest">
        <option>First</option>
        <option>Second</option>
        <option>Third</option>
    </select>

    <footer>
        <button #minimize>Minimize Window</button>
        <button #close>Close Window</button>
    </footer>

    <div #testlog></div>
    <div #testlog2></div>


    <table resizeable>
        <thead>
            <tr><th(index)>index</th><th(caption)>caption</th><th(status)>status</th></tr>
        </thead>
        <tbody>
            <tr><td(index)></td><td(caption)></td><td(status)></td></tr>
        </tbody>
    </table>

</body>
</html>

