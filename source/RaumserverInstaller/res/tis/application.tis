
// include some global functions  
include "global.tis";
// include script for moveable window
include "moveable-view.tis";
// include the scripts for the 'first' page which is the network adapter selection page
include "networkAdapterSelection.tis"
include "networkAdapterSelectionPage.tis"
// include the scripts for the 'second' page which is the device selection page  
include "deviceSelection.tis"
include "deviceSelectionPage.tis"
// include the scripts for the 'third' page which is the installation progress page  
include "installProgressPage.tis"        
// add simple page navigation
include "pageNavigation.tis"

// debug mode
//if( view.connectToInspector ) // the view is in debug mode
//  view.connectToInspector();

/**
*
*/
namespace Application
{           
    const body = $(body); 

    function init() 
    {    
        // open <a> references into the default browser of the system
        self.on("click", "a[href^=http]", function(evt) {
          var href = this.attributes["href"];
          Sciter.launch(href); 
          return true;
        });        
        
              
        // do position of window (center application window)
        Application.initAppWindow();                 
        // init the simple  page navigation
        PageNavigation.init();
        // initialize the networkAdapter Selection Page
        NetworkAdapterSelectionPage.init();
        // initialize the deviceSelection Page
        DeviceSelectionPage.init()
        // initialize the install progress Page
        InstallProgressPage.init();     

        movableView();              
    }


    function initAppWindow()
    {
        // positioning the window in the middle of the screen:
        var (sx,sy,sw,sh) = view.screenBox(#workarea,#rectw); // gettting screen/monitor size
        var (w,h) = self.$(body).box(#dimension); 
        w += w/2; h += h/2; // to accomodate expanding animation
    
        view.move( sx + (sw - w) / 2, sy + (sh - h) / 2, w, h);

        body.show();

        Application.showVersionInfo();
    }


    function showVersionInfo()
    {        
        var versionInfoJsonString = view.getInstallerVersionInfo().toString();         
        var versionInfoJsonObject = parseData(versionInfoJsonString);
        var versionInfoArray = versionInfoJsonObject.propertyAt("version");

        var versionNumberApp = versionInfoArray[0].propertyAt("app").propertyAt("version").toString();
        var versionBuildApp = versionInfoArray[0].propertyAt("app").propertyAt("build").toString();
        var versionNumberLib = versionInfoArray[1].propertyAt("lib").propertyAt("version").toString();        
        var versionBuildLib = versionInfoArray[1].propertyAt("lib").propertyAt("build").toString();

        $(#installerVersionInfo).text = versionNumberApp + " (Build " + versionBuildApp + ")";        
    }


    function newVersionCheckFailed()
    {        
        $(#installerUpdateInfo).text = "Check for new version failed!";          
        $(#installerUpdateInfo).attributes.addClass("errorText");      
    }


    function newVersionAvailable(_binaryUrl, _appVersion, _appVersionBuild)
    {                           
        $(#installerUpdateInfo).$content(New Installer Version available!);                
        $(#installerUpdateInfo).attributes.addClass("newInstallerVersionOnline");            
        $(#installerUpdateInfo).on("click", function(evt) {        
          Sciter.launch(_binaryUrl.toString()); 
          return true;
        });       
    }


    function versionIsUpToDate(_appVersion, _appVersionBuild)
    {
    }


    function newServerVersionCheckFailed()
    {        
        $(#newServerOnlineCheckerProgress).hide();
        $(#newServerOnlineCheckerText).$content(Check for new Raumserver daemon binaries failed!);          
        $(#newServerOnlineCheckerText).attributes.addClass("errorText");      
    }


    function newServerVersionAvailable(_appVersion, _appVersionBuild)
    {                           
        $(#newServerOnlineCheckerProgress).hide();
        $(#newServerOnlineCheckerText).$content(New Raumserver daemon binaries are available!);                
        $(#newServerOnlineCheckerText).append(" (Version: "+ _appVersion + " Build: " + _appVersionBuild + ")");
        $(#newServerOnlineCheckerText).attributes.addClass("succeedText");                   
    }

    function serverVersionIsUpToDate(_appVersion, _appVersionBuild)
    {
        $(#newServerOnlineCheckerProgress).hide();
        $(#newServerOnlineCheckerText).$content(Raumserver Daemon binaries are up to date);    
        $(#newServerOnlineCheckerText).append(" (Version: "+ _appVersion + " Build: " + _appVersionBuild + ")");
    }


    function minimize()
    {
        view.state = View.WINDOW_MINIMIZED;
    }


    function close()
    {
        if(InstallProgressPage.isInstalling())
        {            
            return false;
        }
        view.appClosing();
    }

 }


// when ths document is loaded ad the DO is ready we can do our stuff 
self.ready = function()
{
    view.caption = "Raumserver Installer";          
    Application.init();          
}


// when we close the document then close the app
self.closing = function()
{    
    return Application.close();
}

       