

//| 
//| VirtualList - list view bound with the records array. The list is real time bound with the array - view reflects changes in the array.
//|
//| params.container - DOM element, the list containing list items representing records.
//| params.bufferSize - integer, size of sliding window - max number of DOM element used to render records in the view.
//| params.renderItemView - function(recordNo:integer,record: object, itemEl: Element) - function used to render contents of itemEl by record data, optional.
//| params.setupItemView - function(recordNo:integer,record: object, itemEl: Element) - function used to setup contents of itemEl after rendering (add classes etc.), optional.
//| params.getItemData - function(recordNo:integer): object - function gets called on undefined records to fetch record from external source, optional. 
//|

//|
//| returns DOM element passed in params.container with the following properties/mthods added:
//| - list.value - array, read/write, recordset (array of objects).
//| - list.currentIndex - integer, read/write, index of current record in records array or -1 if there is no current record
//| - list.current - object, read/write, current record or null if there is no current record.
//| - list.recordView(record|index) - function returns DOM element, used to render given record (or record at index). May return null if the record is out of sliding window.
//|

function VirtualList(params) {

    const list = params.container; assert list;
    const BUFFER_SIZE = params.bufferSize || 100; // sliding buffer size, number of DOM elements in the view
        
    var   records = null; 
    var   template = list.first;
    var   item_height = 10;   // will be adjusted later
    var   buffer_start = 0;   // index of first buffer element in _records
    var   visible_items = 0;  // number of visible items in the view
    var   current_record = undefined;  // current record 
    var   cache = [];         // cache of DOM elements - list items
    
    var   showRecord = params.renderItemView || null;      // showRecord(index,record, itemElement)
    var   setupRecord = params.setupItemView || null;  // setupItemView(index,record, itemElement)
    var   recordData = params.getItemData;
    
   
    //multiselection support (not yet)
    //var   selected = params.multiselect ? {} : null; // ATTENTION: if multiselect then each record must have unique .id field
        
    var   setupSetObserver;
    
    function recordAt(n) {
      var r = records[n];
      if(!r && recordData ) {
        setupSetObserver(false, true);
        r = records[n] = recordData(n);
        setupSetObserver(true, true);
      }
      return r;
    }
 
    list.onSize = function() 
    {
      if(list.first)
        item_height = list.first.box(#height,#client); // adjust real item height
      var ch = list.box(#height,#client);
      var vi = (ch + item_height - 1) / (item_height || 10);
      if( vi != visible_items )
        visible_items = vi;
    }
    
    function detachRecordObserver(el) {
      if(!el.data)
        return;
      var thisObserver = null;
      function cmp( observer ) { if( observer.el == el ) { thisObserver = observer; return true; } }
      el.data.eachObserver( cmp );
      if( thisObserver )
        el.data.removeObserver(thisObserver);
      el.data = null;
    }
 
    function setupRecordObserver(record, el) {
     
      function recordObserver() { 
        var idx = records.indexOf(record);
        if( idx >= buffer_start && idx < buffer_start + list.length )
          showRecord(idx, record, el); 
        else
          detachRecordObserver(el);  
      }
      
      recordObserver.el = el;
      
      record.addObserver(recordObserver);
      return record;
    }
    
    function removeRecViewer(el) {
      detachRecordObserver(el);    
      cache.push(el); 
      el.detach();    
      el.state.clear(0xFFFFFFFF); // clear all flags      
    }
    
    function createRecViewer(rec) {
      var t = cache.pop() || template.clone();
      assert !t.state.current;
      t.data = rec;
      return t;
    }
  
    function pumpAfter(i) { 

      var bso = buffer_start;
            
      if(i + BUFFER_SIZE > records.length)
        i = Integer.max(0, records.length - BUFFER_SIZE + 1); 
        
      var bsn = buffer_start = i;
      
      if(list.last) {
        list.last.style#margin-bottom = undefined;
        list.first.style#margin-top = undefined;
      }
      
      for( var i = bso; i < bsn; ++i)
        if(!list.first) 
          break;
        else {
          assert list.first;
          removeRecViewer(list.first);
        }
     
      var ni = bsn + list.length;
      var niend = Integer.min(ni + BUFFER_SIZE - list.length, records.length);
    
      for( var i = ni; i < niend; ++i )
      {
        var rec = recordAt(i); 
        var t = createRecViewer(rec);
        list.append(t);
        setupRecordObserver(rec,t);
        showRecord(i,rec,t);
      }
    
      if(list.first) {
        if(item_height == 10) {
          list.onSize();
        }
        list.first.style#margin-top = px( bsn * item_height );
        if(niend < records.length) {
          var extra = (records.length - niend) * item_height;
          list.last.style#margin-bottom = px(extra);
        }
      }
    };
    
    function pumpBefore(i) {
    
      var nve = Integer.max(BUFFER_SIZE,Integer.max(0,i) + visible_items);
      
      if(list.last) {
        list.last.style#margin-bottom = undefined;
        list.first.style#margin-top = undefined;
      }
      
      while( list.length )
        if( list.last.index + buffer_start < nve) 
          break;
        else 
          removeRecViewer(list.last);
      
      var n = list.length ? buffer_start 
            : Integer.min(records.length, i + BUFFER_SIZE);
            
      for(--n; n >= 0 && list.length < BUFFER_SIZE ; --n)
      {
        var rec = recordAt(n); 
        var t = createRecViewer(rec);
        list.prepend(t);
        setupRecordObserver(rec,t);
        showRecord(n,rec,t);
        buffer_start = n;
      }
      
      if(list.first) {
        list.first.style#margin-top = px( buffer_start * item_height );
        if(buffer_start + list.length < records.length) {
          var extra = (records.length - buffer_start - list.length) * item_height;
          if(extra > 0)
            list.last.style#margin-bottom = px(extra);
        }
      }
    };
    
    function resetView() { 
      
      var sy = list.scroll(#top);
      
      if(list.first) {
        list.first.style#margin-top = undefined;
        list.last.style#margin-bottom = undefined;
      }
      
      function findElementFor(rec) { 
        for(var el in list) { 
          if( el.data === rec )
            return (el, false);
        }
        var el = createRecViewer(rec);        
        return (el, true);
      }

      if( buffer_start + BUFFER_SIZE > records.length )
        buffer_start = records.length - BUFFER_SIZE;
     
      if( buffer_start < 0 )
        buffer_start = 0;
        
      var nend = buffer_start + BUFFER_SIZE;
      
      var n = 0, i = 0;

      var recsInWindow = records.slice(buffer_start, buffer_start + BUFFER_SIZE);
      
      // remove unused:
      for( i = list.length - 1; i >= 0; --i)
      {
        var el = list[i];
        if( recsInWindow.indexOf(el.data) < 0 )
          removeRecViewer(el);
      }
      
      // populate existing
      for( i = buffer_start; i < nend; ++i, ++n)
      {
        if( i >= records.length )
          break;
          
        var rec = recordAt(i);
        var (t, isNew) = findElementFor(rec);
        if( isNew ) {
          list.insert(t, n);
          setupRecordObserver(rec,t);
          showRecord(i,rec,t);
        //} else if( n != t.index ) // existing, adjust its position if needed
        //  t.swap( list[n] );
        } else if( n != t.index ) {// existing, adjust its position if needed
          if( n < list.length )
            t.swap( list[n] );
          else
            list.insert(t);
        }          
      }
      
      if(list.first) {
        var before = buffer_start * item_height;
        list.first.style#margin-top = px( before );
        var rest = records.length - (buffer_start + list.length);
        var after = rest >= 0? rest * item_height : 0;
        list.last.style#margin-bottom = px(after);
      }
      list.scrollTo(0, sy);
    }
    
    function onScrollTo(recNo) 
    {
      if( recNo + visible_items >= buffer_start + BUFFER_SIZE ) {
        pumpAfter(recNo);
        list.update();
      }
      else if( recNo < buffer_start ) {
        pumpBefore(recNo);
        list.update();
      }
    }
    
    list.onScroll = function(evt) 
    {
      if( evt.type == Event.SCROLL_POS )
        onScrollTo(evt.scrollPos / item_height);
    };
    
    function onRecordsetRangeAdd(start, end) 
    {
      if( start <= buffer_start && list.length ) 
      {  
        if(list.length < visible_items)
        {
          buffer_start += end - start;
          pumpBefore(buffer_start);
          return;
        }
      
        var extra = (end - start) * item_height; 
        var topm = buffer_start * item_height;
        
        var sy = list.scroll(#top);
        
        buffer_start += (end - start);
        
        list.first.style#margin-top = px(topm + extra);
        list.scrollTo(0, sy + extra);
      } 
      else if(start >= buffer_start + BUFFER_SIZE && list.length) 
      {
         var extra = (records.length - buffer_start - list.length) * item_height;
         if(extra > 0)
            list.last.style#margin-bottom = px(extra);
      }
      else 
        resetView();
    }
    function onRecordsetRangeUpdate(start, end) 
    {
      if( end < buffer_start )
        return;
      else if( start > buffer_start + BUFFER_SIZE )
        return;
      resetView();
    }
    function onRecordsetRangeDelete(start, end) 
    {
      if( end <= buffer_start ) {
        var oldtop = buffer_start * item_height;
        buffer_start -= end - start;
        assert(buffer_start >= 0);
        var extra = (end - start) * item_height;
        var sy = list.scroll(#top);
        list.scrollTo(0, sy - extra);
        list.first.style#margin-top = px(Integer.max(0,oldtop-extra));
      }
      else if( start > buffer_start + BUFFER_SIZE ) {
        var extra = (records.length - buffer_start - list.length) * item_height;
        if(extra > 0)
          list.last.style#margin-bottom = px(extra);
        else
          list.last.style#margin-bottom = undefined;
      }
      else 
        resetView();
    }
    
    setupSetObserver = function(apply, silent = false )
    {
      if(apply) {
        // data change event handler 
        function onRecordSetChange(changedef) { 
        
          // changedef here is:
          //[0] - symbol, one of #add,#update,#delete,#add-range,#delete-range or #update-range
          //[1] - object or vector, its element(s) was changed;
          //[2] - symbol or string, property name - for objects
          //      or start of changed range (index) in arrays  
          //[3] - end of changed range (index, not inclusive) in arrays  
          switch(changedef[0]) {
            case #add-range:    onRecordsetRangeAdd(changedef[2],changedef[3]); break;
            case #update-range: onRecordsetRangeUpdate(changedef[2],changedef[3]); break;
            case #delete-range: onRecordsetRangeDelete(changedef[2],changedef[3]); break;
          }
        } 
        onRecordSetChange.list = list;
        // assign it as an observer    
        Object.addObserver.call(records,onRecordSetChange); // subscribe to collection object changes    
      }
      else {
        if( !silent )
          for(var el in list)
            removeRecViewer(el);
        var thisObserver = null;
        function cmp( observer ) { if( observer.list == list ) { thisObserver = observer; return true; } }
        records.eachObserver( cmp );
        if(thisObserver)
          Object.removeObserver.call(records,thisObserver); // unsubscribe
      }
    }
 
    list[#value] = property(v) 
    {
      get return records;
      set { 
        if(records !== v) {
          if(records)
            setupSetObserver(false);  
          if(records = v)
            setupSetObserver(true);  
        }
        if(list.last) {
          list.last.style#margin-bottom = undefined;
          list.first.style#margin-top = undefined;
        }
        list.clear(); 
        if( records )
          pumpAfter.call(list,0); 
        list.scrollTo(0,0);
      }
    }
  
    list[#offset] = property(v) {
		get return buffer_start;
	}
  
    if(!showRecord) showRecord = function(i,r,el) 
    {
      el.value = r; // each item has behavior form so its value is an aggregate 
      el.state.current = current_record === r;
      if(setupRecord) setupRecord(i,r,el);
    };
        
    function setCurrent(index) {
      if( var old = list.$(>li:current,>tr:current) ) {
        if(old.index + buffer_start == index) return; // already set
        old.state.current = false;
      }
      current_record = null;
      if( index < 0 || index >= records.length )
        return; // out of records range
      
      current_record = recordAt(index);
      
      var y = index * item_height;
      
      if( index < buffer_start ) {
        list.scrollTo(0, y, true); 
        //onScrollTo(list.scroll(#top) / item_height);
      }
      else if( index >= buffer_start + list.length ) {
        list.scrollTo(0, y - list.scroll(#height) + item_height,true); 
        //onScrollTo(list.scroll(#top) / item_height);
      }
      else {
        var el = list[index - buffer_start];
        el.state.current = true;
        var sy = list.scroll(#top);
        if( y < sy )
          list.scrollTo(0, y,true); 
        else if( y + item_height > sy + list.scroll(#height) )
          list.scrollTo(0, y - list.scroll(#height) + item_height ,true); 
        else 
          return;
        //onScrollTo(list.scroll(#top) / item_height);
      }
    }
                
    list.onMouse = function(evt) {
      if( evt.type == (Event.MOUSE_DOWN | Event.SINKING) )
      {
        var li = evt.target.$p(li,tr);
        if( li && li.parent === list )
          setCurrent(li.index + buffer_start);
      }
    }
    list.onKey = function(evt) {
      if( evt.type == Event.KEY_DOWN )
      {
        switch(evt.keyCode)
        {
          case Event.VK_HOME:  setCurrent(0); return true;
          case Event.VK_END:   setCurrent(records.length - 1); return true;
          case Event.VK_UP:    setCurrent(Integer.max(0,list.currentIndex - 1)); return true;
          case Event.VK_DOWN:  setCurrent(Integer.min(records.length - 1, list.currentIndex + 1)); return true;
          case Event.VK_PRIOR: setCurrent(Integer.max(0,list.currentIndex - visible_items + 1)); return true;
          case Event.VK_NEXT:  setCurrent(Integer.min(records.length - 1, list.currentIndex + visible_items - 1)); return true;
        }
      } 
    }
    
    list.currentIndex = property(v) 
    {
      get return records.indexOf(current_record);
      set { setCurrent(v); }
    } 
    
    list.current = property(v) 
    {
      get return records.indexOf(current_record) >= 0? current_record : null;
      set { setCurrent(records.indexOf(v)); }
    } 
    
    // returns "record view" - DOM element that represents nth record.
    //         or null if the record is out of the sliding window 
    list.recordView = function( recordOrIndex ) {
      var idx = recordOrIndex;
      if(typeof recordOrIndex != #integer) 
        idx = records.indexOf(recordOrIndex);
      if( idx < buffer_start )
        return null; // out of sliding window
      else if( idx >= buffer_start + list.length )
        return null; // out of sliding window
      return list[idx - buffer_start];
    }
  
    list.clear();
    if( records )
      pumpAfter(0);
    return list;
}

class VList : Behavior 
{
  function attached() { 
     VirtualList { container: this };
  }
  property animating(v) {
    get return this.state.animating;
  }
}

class VGrid : Behavior 
{
  function attached() { 
    this.tbody = this.$(tbody);
    VirtualList { container: this.tbody  };
  }
  
  property value(v) {
    set this.tbody.value = v;
    get return this.tbody.value;
  }
  
  property animating(v) {
    get return this.tbody.state.animating;
  }
  
 
}


